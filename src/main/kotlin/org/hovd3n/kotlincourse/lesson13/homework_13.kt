package org.hovd3n.kotlincourse.lesson13

import org.hovd3n.kotlincourse.lesson4.letter


fun main() {

    // 1. Предварительные задачи на использование методов.
//Подбери подходящий для задачи метод
//Задачи на приведение коллекций к значению
//isNotEmpty +
//getOrElse +
//joinToString +
//firstOrNull +
//size +
//isEmpty +
//minOrNull +
//contains +
//sum +
//average +
//maxOrNull +
//
//Проверить, что размер коллекции больше 5 элементов.
    val numbers = listOf(1, 2, 3, 4, 5, 6)
    val num1 = numbers.size > 5
    println(num1)

//Проверить, что коллекция пустая
    val num2 = listOf(null, null)
    num2.isEmpty()

//Проверить, что коллекция не пустая
    num2.isNotEmpty()

//Взять элемент по индексу или создать значение если индекса не существует
    numbers.getOrElse(1) { -1 }

//Собрать коллекцию в строку
    val numbersString = numbers.joinToString()
    println(numbersString)

//Посчитать сумму всех значений
    val numbersSum = numbers.sum()

//Посчитать среднее
    val numbersAverage = numbers.average()

//Взять максимальное число
    val maxNumber = numbers.maxOrNull()

//Взять минимальное число
    val minNumber = numbers.minOrNull()

//Взять первое число или null
    val firstNumber = numbers.firstOrNull()

//Проверить что коллекция содержит элемент
    val collection = numbers.contains(3)

//    Задачи на обработку коллекций
//    sorted +
//    groupBy +
//    distinct +
//    take +
//    takeLast +
//    filter +
//    filterNot +
//    map +
//    associate +
//    sortedDescending +
//    forEach +
//    filterNotNull +
//
//    Отфильтровать коллекцию по диапазону 18-30
    val filterCollection = numbers.filter { it in 18..30 }

//    Выбрать числа, которые не делятся на 2 и 3 одновременно
    val notTwoOrThree = numbers.filterNot { it % 2 == 0 && it % 3 == 0 }
    println(notTwoOrThree) // ??????????????????????????????

//    Очистить текстовую коллекцию от null элементов
    val lines = listOf("Автомобиль", "Бибика", "Валила")
    val clean = lines.filterNotNull()

//    Преобразовать текстовую коллекцию в коллекцию длин слов

    val wordsSize = lines.map {"$it".length}
    println(wordsSize)

//    Преобразовать текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова
    val convert = lines.associate { it to it.reversed() }

//    Отсортировать список в алфавитном порядке
    val sorting = lines.sorted()
    println(sorting)

//    Отсортировать список по убыванию
    val sortingNumbers = numbers.sortedDescending()
    println(sortingNumbers)

//    Распечатать квадраты элементов списка
    numbers.forEach {
        println(it * it)
    }

//    Группировать список по первой букве слов
    val sortingLines = lines.groupBy { it.firstOrNull()}
    println(sortingLines)

//    Очистить список от дублей
    val notDouble = numbers.distinct()

//    Взять первые 3 элемента списка
    val takeFirst = numbers.take(3)
    println(takeFirst)

//    Взять последние 3 элемента списка
    val takeLast = numbers.takeLast(3)
    println(takeLast)

    println("Задание 2")
    println(myMethod(listOf(1, 2, 30, 2, 1, 2, 30)))
    println(myMethod(listOf()))
    println(myMethod(listOf(1,2,3)))
    println(myMethod(listOf(0,1,2,3,4,5,6)))
    println(myMethod(listOf(5000,6000,7000,8000,9000,10000)))
    println(myMethod(listOf(20, 0, 10, 10, 20, 0)))
    println(myMethod(listOf(-15, -20, -150, -90, -40, -25)))
    println(myMethod(listOf(1001, 1002, 1003, 1004, 1005)))
    println(myMethod(listOf(3, 14, 50, 30, 40, 20)))
    println(myMethod(listOf(10, 0, 10, 10, 10, 100, 19, 15, 18, 16)))

    println("Задание 3")
    println(filtr(listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)))

    println("Задание 4")
    println(filtr2(listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
        "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик",
    "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
    "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба",
    "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
    "посуда", "Настольная лампа", "торшер", "Этажерка")))

    println("Задание 5")
    println(filtr3(listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
        "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик",
        "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
        "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба",
        "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
        "посуда", "Настольная лампа", "торшер", "Этажерка")))

    println("Задание 6")
    println(filtr4(listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)))

    println("Задание 7")
    println(filtr5(listOf(22, 18, 30, 45, 17, null, 60)))
}
    // Задание 2: Характеристика числовой коллекции
    //Написать метод, который принимает коллекцию чисел и возвращает строку
    // с текущим состоянием коллекции используя конструкцию when
    //Если коллекция пустая - “Пусто”
    //Если количество элементов меньше пяти - “Короткая”
    //Если коллекция начинается с 0 - “Стартовая”
    //Если сумма всех чисел больше 10000 - “Массивная”
    //Если среднее значение равно 10 - “Сбалансированная”
    //Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
    //Если максимальное число меньше -10 - “Отрицательная”
    //Если минимальное число больше 1000 - “Положительная”
    //Если содержит одновременно числа 3 и 14 - “Пи***тая”
    //Иначе - “Уникальная”
    //
    //Вызвать метод с данными, подходящими под каждую из веток

    fun myMethod (collection: List<Int>): String {
        return when {
            collection.joinToString { " " }.length == 19 -> "Клейкая"
            collection.isEmpty() -> "Пусто"
            collection.size < 5 -> "Короткая"
            collection.getOrNull(0) == 0 -> "Стартовая"
            collection.sum() > 10000 -> "Массивная"
            collection.average().toInt() == 10 -> "Сбалансированная"
            collection.max() < -10 -> "Отрицательная"
            collection.min() > 1000 -> "Положительная"
            collection.contains(3) && collection.contains(14) -> "Пи***тая"
            else -> { "Уникальная" }
        }
    }

//Задание 3: Анализ Учебных Оценок
//Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
// Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
    fun filtr (grades: List<Int>) {
        println(grades.filter { it >= 60 }.sorted().take(3))
    }

//Задание 4: Создание каталога по первой букве.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка",
//    "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик",
//    "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
//    "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба",
//    "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
//    "посуда", "Настольная лампа", "торшер", "Этажерка" )
    //Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.

    fun filtr2 (list: List<String>) {
        println(list.map { it.lowercase() }.groupBy { it [0] })
    }

//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 3.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вывести форматированный текст с двумя знаками после запятой.

    fun filtr3 (list: List<String>) {
        println("Среднее значение: %.2f".format(list.map { it.length }.average()))
    }

//Задание 6: Категоризация чисел.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).

    fun filtr4 (list: List<Int>) {
        println(list.distinct().sortedDescending().groupBy { if (it % 2 == 0) "Четные" else "Нечетные" })
    }
//Задание 7: Поиск первого подходящего элемента
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//Цель: Найти первый возраст в списке, который соответствует условию (больше 18), преобразовать его к строке,
// или вернуть сообщение "Подходящий возраст не найден".

    fun filtr5 (list: List<Int?>) {
        println(list.filterNotNull().firstOrNull { it > 18 }?.toString() ?: "Подходящий возраст не найден")
    }